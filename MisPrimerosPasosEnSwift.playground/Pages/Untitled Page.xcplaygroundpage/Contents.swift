import UIKit
/*:
 ## ‚≠êÔ∏èBucles
 
 Son bloques de c√≥digo que nos facilitan como programadores a tareas que son repetitivas, ejecutando un segmento de c√≥digo repetidas veces, por un n√∫mero espec√≠fico de iteraciones o hasta cierta condici√≥n. üå™
 
 Antes de comenzar con los controles de flujo recordemos los operadores de comparaci√≥n y asignaci√≥n que podemos manejar en Swift:
 */
1 == 1 //true porque 1 es igual a 1
2 != 1 //true porque 2 no es equal a 1
2 > 1 //true porque 2 es m√°s grande que 1
1 < 2 //true porque 1 m√°s peque√±o que 2
1 >= 1 //true porque 1 es mayor o igual que 1
2 <= 1 //falso porque 2 no es menor o igual que 1
/*:

 ‚ú® For
 
 Sirve para iterar sobre una secuencia como elementos de un array (matriz), rangos de n√∫meros o caracteres en una string (cadena).
 
 Su estructura es la siguiente:
 
 for `nombre_del_for` in `rango`
 
 
 {
 
 `Acci√≥n a repetir`
 
 
 }  */
//: *Ejemplos:*
//: * For sencillo
for i in 1...5
{
    print("Hola")
}
//: * For con Identaci√≥n
for _ in 1...5
{
    print("Repeat")
}

//: * Concatenado variables simples con un FOR:
let persona = "üòö"
for carita in 1...5 {
    print("emoji \(carita) \(persona) de 5")
}
//: * Impresi√≥n de un arreay Unidimensional:
var caritas: [String] = ["üò£", "ü§¨" ]
/*:
 Esta es una manera sencilla de imprimir los elementos de un arreglo, √∫nicamente haciendo referencia en la parte del `rango` al nombre del array. As√≠ indicaremos que el ciclo se lleve a cabo dentro del array */
for carita in caritas
{
    print(carita)
}
/*:
 Realizaremos la misma acci√≥n pero de otra forma: */
for carita in 0...(caritas.count-1)
{
    print(caritas[carita])
}

//: * Impresi√≥n de un arreay Bidimensional  con un FOR:
var arraybidimensional:[[String]] = [
    ["ü§Ø","ü§¨"],
    ["ü•∂", "üòñ"],
    ["üòò","üò±"],
]
for i in arraybidimensional
{
    for j in i
    {
        print(j)
    }
}

/*:
 ‚ú® While
 
 Realiza un conjunto de declaraciones hasta que una condici√≥n se convierte en false, se suelen usar cuando no se sabe el n√∫mero de iteraciones que se han de realizar.
 
 Comprueba una condici√≥n y si se cumple, realiza las sentencias hasta que ya no se cumpla.
 
 *Ejemplo:*
 */
var edad : Int = 16
var a√±o : Int = 2017
while edad<18
{
    print("Es el a√±o \(a√±o), Tienes \(edad) a√±os, No eres mayor de edad.")
    edad += 1
    a√±o += 1
    if edad>18
    {
        print("Es el a√±o \(a√±o), Tienes \(edad) a√±os, Ya tienes edad!")
    }
}

/*:
 ‚ú® Repeat - While
 
 Primero realiza las sentencias y luego comprueba la condici√≥n
 
 *Ejemplo:*
 */
var fruta : Int = 0

repeat
{
    print("No has comido suficientes frutas hoy")
    fruta += 1
} while fruta < 4
print("Ya comiste suficientes frutas hoy")

/*:[Anterior üëàüèª](@previous)  |  P√°gina 17 de 21  |  [üëâüèª Siguiente](@next)
 
 */

